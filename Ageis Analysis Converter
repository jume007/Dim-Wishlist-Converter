import os
from openpyxl import load_workbook

excel_file = 'Destiny 2_ Endgame Analysis.xlsx'
output_file = 'Destiny 2_Endgame Analysis.txt'

print(f"Checking for {excel_file}")
if not os.path.exists(excel_file):
    print(f"Error: {excel_file} not found")
    exit(1)

wb = load_workbook(excel_file, read_only=True, data_only=True)
weapon_sheets = ['Autos', 'Bows', 'HCs', 'Pulses', 'Scouts', 'Sidearms', 'SMGs', 'BGLs', 'Fusions', 'Glaives', 'Shotguns', 'Snipers', 'HGLs', 'LFRs', 'LMGs', 'Rockets', 'Swords', 'Other', 'Rocket Sidearms', 'Traces']

# Step 1: Initial run to get A/S-tier names
column_b_names = {}
for sheet_name in weapon_sheets:
    print(f"Processing sheet: {sheet_name}")
    if sheet_name in wb.sheetnames:
        sheet = wb[sheet_name]
        column_b_values = []
        
        # Find the last column with data in Row 2 (headers)
        header_row = next(sheet.iter_rows(min_row=2, max_row=2), [])  # Row 2 as header
        last_col_index = None
        for col_idx, cell in enumerate(reversed(header_row)):  # Reverse to find last non-empty
            if cell.value is not None and not isinstance(cell.value, (int, float)) and cell.value.strip():
                last_col_index = len(header_row) - 1 - col_idx  # 0-based index from end
                break
        
        if last_col_index is not None and last_col_index >= 1:  # Ensure Column B exists
            print(f"Found last column at index {last_col_index} for {sheet_name}")
            for row in sheet.iter_rows(min_row=3):  # Start from row 3 (data, after Row 2 header)
                cell_value_b = row[1].value  # Column B (index 1, name)
                cell_value_last = row[last_col_index].value if last_col_index < len(row) else None
                if cell_value_b is not None and not isinstance(cell_value_b, (int, float)) and cell_value_b.strip():
                    # Handle two sentences in the same cell
                    if '\n' in str(cell_value_b):
                        parts = str(cell_value_b).split('\n')
                        full_name = parts[0].strip()
                        for part in parts[1:]:
                            if 'version' in part.lower():
                                full_name += ' ' + part.strip()
                    else:
                        full_name = cell_value_b.strip()
                    if (sheet_name != 'Other' and cell_value_last and isinstance(cell_value_last, str) and any(x in cell_value_last for x in ['A', 'S'])):
                        column_b_values.append(full_name)
            if sheet_name == 'Other':
                for row in sheet.iter_rows(min_row=3):  # Include all in Other
                    cell_value_b = row[1].value  # Column B
                    if cell_value_b is not None and not isinstance(cell_value_b, (int, float)) and cell_value_b.strip():
                        # Handle two sentences in the same cell
                        if '\n' in str(cell_value_b):
                            parts = str(cell_value_b).split('\n')
                            full_name = parts[0].strip()
                            for part in parts[1:]:
                                if 'version' in part.lower():
                                    full_name += ' ' + part.strip()
                        else:
                            full_name = cell_value_b.strip()
                        column_b_values.append(full_name)
        else:
            print(f"No valid last column found in {sheet_name}, skipping A/S filter")
            if sheet_name == 'Other':
                for row in sheet.iter_rows(min_row=3):  # Include all in Other
                    cell_value_b = row[1].value  # Column B
                    if cell_value_b is not None and not isinstance(cell_value_b, (int, float)) and cell_value_b.strip():
                        # Handle two sentences in the same cell
                        if '\n' in str(cell_value_b):
                            parts = str(cell_value_b).split('\n')
                            full_name = parts[0].strip()
                            for part in parts[1:]:
                                if 'version' in part.lower():
                                    full_name += ' ' + part.strip()
                        else:
                            full_name = cell_value_b.strip()
                        column_b_values.append(full_name)

        column_b_names[sheet_name] = column_b_values
        print(f"Found {len(column_b_values)} names in Column B of {sheet_name}: {column_b_values}")

# Step 2: Add Column 1 and Column 2 perks to the names
for sheet_name in weapon_sheets:
    if sheet_name in wb.sheetnames and sheet_name in column_b_names:
        sheet = wb[sheet_name]
        header_row = next(sheet.iter_rows(min_row=2, max_row=2), [])  # Row 2 as header
        col1_index = None
        col2_index = None
        for col_idx, cell in enumerate(header_row):
            if cell.value is not None and not isinstance(cell.value, (int, float)) and cell.value.strip():
                if 'column 1' in cell.value.lower():  # Look for Column 1
                    col1_index = col_idx
                if 'column 2' in cell.value.lower():  # Look for Column 2
                    col2_index = col_idx
        
        if col1_index is not None and col2_index is not None:
            updated_values = []
            for row in sheet.iter_rows(min_row=3):  # Start from row 3 (data)
                cell_value_b = row[1].value  # Column B (index 1, name)
                cell_value_col1 = row[col1_index].value if col1_index < len(row) else None
                cell_value_col2 = row[col2_index].value if col2_index < len(row) else None
                if cell_value_b is not None and not isinstance(cell_value_b, (int, float)) and cell_value_b.strip():
                    # Handle two sentences in the same cell
                    if '\n' in str(cell_value_b):
                        parts = str(cell_value_b).split('\n')
                        full_name = parts[0].strip()
                        for part in parts[1:]:
                            if 'version' in part.lower():
                                full_name += ' ' + part.strip()
                    else:
                        full_name = cell_value_b.strip()
                    if full_name in column_b_names[sheet_name]:
                        col1_perks = str(cell_value_col1).replace('\n', ', ') if cell_value_col1 else 'None'
                        col2_perks = str(cell_value_col2).replace('\n', ', ') if cell_value_col2 else 'None'
                        updated_values.append(f"{full_name} (Column 1: {col1_perks}, Column 2: {col2_perks})")
            column_b_names[sheet_name] = updated_values
        else:
            print(f"No Column 1 or Column 2 found in {sheet_name}, using names only")
            for name in column_b_names[sheet_name]:
                updated_values.append(f"{name} (Column 1: None, Column 2: None)")
            column_b_names[sheet_name] = updated_values

# Step 3: Add Origin Trait perks to the names
for sheet_name in weapon_sheets:
    if sheet_name in wb.sheetnames and sheet_name in column_b_names:
        sheet = wb[sheet_name]
        header_row = next(sheet.iter_rows(min_row=2, max_row=2), [])  # Row 2 as header
        origin_trait_index = None
        for col_idx, cell in enumerate(header_row):
            if cell.value is not None and not isinstance(cell.value, (int, float)) and cell.value.strip():
                if 'origin trait' in cell.value.lower():  # Look for Origin Trait
                    origin_trait_index = col_idx
                    break
        
        if origin_trait_index is not None:
            updated_values = []
            for value in column_b_names[sheet_name]:
                full_name = value.split(' (')[0]  # Extract name before perks
                for row in sheet.iter_rows(min_row=3):  # Start from row 3 (data)
                    cell_value_b = row[1].value  # Column B (index 1, name)
                    if cell_value_b is not None and not isinstance(cell_value_b, (int, float)) and cell_value_b.strip():
                        # Handle two sentences in the same cell
                        if '\n' in str(cell_value_b):
                            parts = str(cell_value_b).split('\n')
                            check_name = parts[0].strip()
                            for part in parts[1:]:
                                if 'version' in part.lower():
                                    check_name += ' ' + part.strip()
                        else:
                            check_name = cell_value_b.strip()
                        if check_name == full_name:
                            cell_value_origin = row[origin_trait_index].value if origin_trait_index < len(row) else None
                            origin_perks = str(cell_value_origin).replace('\n', ', ') if cell_value_origin else 'None'
                            updated_values.append(f"{value}, Origin Trait: {origin_perks}")
                            break
            column_b_names[sheet_name] = updated_values
        else:
            print(f"No Origin Trait found in {sheet_name}, using names with perks only")
            for value in column_b_names[sheet_name]:
                updated_values.append(f"{value}, Origin Trait: None")
            column_b_names[sheet_name] = updated_values

# Write to file
with open(output_file, 'w', encoding='utf-8') as f:
    for sheet_name, values in column_b_names.items():
        f.write(f"{sheet_name}:\n")
        for value in values:
            f.write(f"  - {value}\n")
        f.write("\n")

print(f"Column B names with perks saved to: {output_file}")
print("Review the file to see names from Column B with Column 1, Column 2, and Origin Trait perks where the last column contains A or S, or all for Other.")
