import json
import os
from openpyxl import load_workbook

# Define paths
current_dir = os.path.dirname(__file__)
excel_file = os.path.join(current_dir, 'Destiny 2_ Endgame Analysis.xlsx')
txt_output_file = os.path.join(current_dir, 'DestinyAnalysisOutput.txt')
json_path = os.path.join(current_dir, 'bungie_data.json')
output_path = txt_output_file  # Define output_path for the single output file

# Step 1: Convert Excel to Text Data
if os.path.exists(excel_file):
    wb = load_workbook(excel_file, read_only=True, data_only=True)
    weapon_sheets = ['Autos', 'Bows', 'HCs', 'Pulses', 'Scouts', 'Sidearms', 'SMGs', 'BGLs', 'Fusions', 'Glaives', 'Shotguns', 'Snipers', 'HGLs', 'LFRs', 'LMGs', 'Rockets', 'Swords', 'Other', 'Rocket Sidearms', 'Traces']

    column_b_names = {}
    for sheet_name in weapon_sheets:
        if sheet_name in wb.sheetnames:
            sheet = wb[sheet_name]
            column_b_values = []
            
            # Find the last column with data in Row 2 (headers)
            header_row = next(sheet.iter_rows(min_row=2, max_row=2), [])
            last_col_index = None
            for col_idx, cell in enumerate(reversed(header_row)):
                if cell.value is not None and not isinstance(cell.value, (int, float)) and cell.value.strip():
                    last_col_index = len(header_row) - 1 - col_idx
                    break
            
            if last_col_index is not None and last_col_index >= 1:
                for row in sheet.iter_rows(min_row=3):  # Start from row 3 (data)
                    cell_value_b = row[1].value  # Column B (index 1, name)
                    cell_value_last = row[last_col_index].value if last_col_index < len(row) else None
                    if cell_value_b is not None and not isinstance(cell_value_b, (int, float)) and cell_value_b.strip():
                        if '\n' in str(cell_value_b):
                            parts = str(cell_value_b).split('\n')
                            full_name = parts[0].strip()
                            for part in parts[1:]:
                                if 'version' in part.lower():
                                    full_name += ' ' + part.strip()
                        else:
                            full_name = cell_value_b.strip()
                        if (sheet_name != 'Other' and cell_value_last and isinstance(cell_value_last, str) and any(x in cell_value_last for x in ['A', 'S'])):
                            column_b_values.append(full_name)
                if sheet_name == 'Other':
                    for row in sheet.iter_rows(min_row=3):
                        cell_value_b = row[1].value
                        if cell_value_b is not None and not isinstance(cell_value_b, (int, float)) and cell_value_b.strip():
                            if '\n' in str(cell_value_b):
                                parts = str(cell_value_b).split('\n')
                                full_name = parts[0].strip()
                                for part in parts[1:]:
                                    if 'version' in part.lower():
                                        full_name += ' ' + part.strip()
                            else:
                                full_name = cell_value_b.strip()
                            column_b_values.append(full_name)
            column_b_names[sheet_name] = column_b_values

    # Add Column 1 and Column 2 perks (removing Origin Trait)
    for sheet_name in weapon_sheets:
        if sheet_name in wb.sheetnames and sheet_name in column_b_names:
            sheet = wb[sheet_name]
            header_row = next(sheet.iter_rows(min_row=2, max_row=2), [])
            col1_index, col2_index = None, None
            for col_idx, cell in enumerate(header_row):
                if cell.value and not isinstance(cell.value, (int, float)) and cell.value.strip():
                    if 'column 1' in cell.value.lower():
                        col1_index = col_idx
                    if 'column 2' in cell.value.lower():
                        col2_index = col_idx
            
            updated_values = []
            for row in sheet.iter_rows(min_row=3):
                cell_value_b = row[1].value
                if cell_value_b and not isinstance(cell_value_b, (int, float)) and cell_value_b.strip():
                    if '\n' in str(cell_value_b):
                        parts = str(cell_value_b).split('\n')
                        full_name = parts[0].strip()
                        for part in parts[1:]:
                            if 'version' in part.lower():
                                full_name += ' ' + part.strip()
                    else:
                        full_name = cell_value_b.strip()
                    if full_name in column_b_names[sheet_name]:
                        col1_perks = row[col1_index].value.replace('\n', ', ') if col1_index is not None and col1_index < len(row) else 'None'
                        col2_perks = row[col2_index].value.replace('\n', ', ') if col2_index is not None and col2_index < len(row) else 'None'
                        updated_values.append((full_name, col1_perks, col2_perks))
            column_b_names[sheet_name] = updated_values
else:
    if not os.path.exists(txt_output_file):
        raise FileNotFoundError(f"Neither {excel_file} nor {txt_output_file} found")
    # Load existing text file to get weapon data
    with open(txt_output_file, 'r', encoding='utf-8') as f:
        lines = [line.strip() for line in f if line.strip()]
        column_b_names = {}
        current_sheet = None
        for line in lines:
            if line.endswith(':'):
                current_sheet = line[:-1]
                column_b_names[current_sheet] = []
            elif line.startswith('  - ') and current_sheet:
                base_part = line.split(' (')[0].strip()
                full_name = ' '.join(base_part.split('  - ')[1:]).strip()
                col1_perks = line.split('Column 1: ')[1].split(', Column 2:')[0] if 'Column 1:' in line else 'None'
                col2_perks = line.split('Column 2: ')[1] if 'Column 2:' in line else 'None'
                column_b_names[current_sheet].append((full_name, col1_perks, col2_perks))

# Load bungie_data.json
if not os.path.exists(json_path):
    raise FileNotFoundError(f"bungie_data.json not found in {json_path}")
with open(json_path, 'r', encoding='utf-8') as f:
    bungie_data = json.load(f)

# Process weapon hashes and perks into a single output, checking for multiple perk sockets
with open(output_path, 'w', encoding='utf-8') as output_file:
    for sheet_name, values in column_b_names.items():
        output_file.write(f"{sheet_name}:\n")
        for full_name, col1_perks, col2_perks in values:
            output_file.write(f"  - Weapon: {full_name}\n")
            # Find weapon hash and check for enhancement support and multiple perk sockets
            weapon_hash = None
            has_enhanced_perks = False
            multiple_perk_sockets = False
            for item in bungie_data.get('DestinyCollectibleDefinition', {}).values():
                if 'displayProperties' in item and 'name' in item['displayProperties']:
                    if item['displayProperties']['name'].lower().strip() == full_name.lower().strip():
                        weapon_hash = item.get('itemHash')
                        # Check if weapon supports enhanced perks and multiple perk sockets
                        if str(weapon_hash) in bungie_data.get('DestinyInventoryItemDefinition', {}):
                            weapon_item = bungie_data['DestinyInventoryItemDefinition'][str(weapon_hash)]
                            if 'sockets' in weapon_item:
                                socket_entries = weapon_item['sockets'].get('socketEntries', [])
                                # Count perk-related sockets (e.g., category 4241085061 for perks)
                                perk_category_count = sum(1 for entry in socket_entries if 'randomizedPlugSetHash' in entry and any(
                                    cat.get('socketCategoryHash') == 4241085061 for cat in weapon_item['sockets'].get('socketCategories', [])
                                ))
                                if perk_category_count > 1:  # More than one socket in the perk category
                                    multiple_perk_sockets = True
                                if any('randomizedPlugSetHash' in entry for entry in socket_entries):
                                    has_enhanced_perks = True
                                # Additional check for craftable weapons
                                if 'perks' in weapon_item and any(p.get('perkHash') for p in weapon_item.get('perks', [])):
                                    has_enhanced_perks = True
                        break
            output_file.write(f"    Weapon Hash: {weapon_hash if weapon_hash else 'Not Found'}\n")
            output_file.write(f"    Multiple Perk Sockets: {multiple_perk_sockets}\n")

            # Find perk hashes for Column 1
            if col1_perks != 'None':
                output_file.write("    Column 1 Perks:\n")
                perks = [p.strip() for p in col1_perks.split(',') if p.strip()]
                for perk in perks:
                    item_hash_non_enhanced = None
                    item_hash_enhanced = None
                    for item_hash, item in bungie_data.get('DestinyInventoryItemDefinition', {}).items():
                        if 'displayProperties' in item and 'name' in item['displayProperties']:
                            if item['displayProperties']['name'].lower().strip() == perk.lower().strip():
                                if has_enhanced_perks and ('itemTypeDisplayName' in item and item['itemTypeDisplayName'] == 'Enhanced Trait' or
                                    'tooltipNotifications' in item and any("improved" in notif['displayString'].lower() or "enhances" in notif['displayString'].lower() for notif in item.get('tooltipNotifications', []))):
                                    item_hash_enhanced = item_hash
                                else:
                                    item_hash_non_enhanced = item_hash
                    output_line = f"      {perk} (Non-Enhanced), Hash: {item_hash_non_enhanced if item_hash_non_enhanced else 'Not Found'}"
                    if has_enhanced_perks and item_hash_enhanced:
                        output_line += f", {perk} (Enhanced), Hash: {item_hash_enhanced}"
                    output_file.write(f"{output_line}\n")

            # Find perk hashes for Column 2
            if col2_perks != 'None':
                output_file.write("    Column 2 Perks:\n")
                perks = [p.strip() for p in col2_perks.split(',') if p.strip()]
                for perk in perks:
                    item_hash_non_enhanced = None
                    item_hash_enhanced = None
                    for item_hash, item in bungie_data.get('DestinyInventoryItemDefinition', {}).items():
                        if 'displayProperties' in item and 'name' in item['displayProperties']:
                            if item['displayProperties']['name'].lower().strip() == perk.lower().strip():
                                if has_enhanced_perks and ('itemTypeDisplayName' in item and item['itemTypeDisplayName'] == 'Enhanced Trait' or
                                    'tooltipNotifications' in item and any("improved" in notif['displayString'].lower() or "enhances" in notif['displayString'].lower() for notif in item.get('tooltipNotifications', []))):
                                    item_hash_enhanced = item_hash
                                else:
                                    item_hash_non_enhanced = item_hash
                    output_line = f"      {perk} (Non-Enhanced), Hash: {item_hash_non_enhanced if item_hash_non_enhanced else 'Not Found'}"
                    if has_enhanced_perks and item_hash_enhanced:
                        output_line += f", {perk} (Enhanced), Hash: {item_hash_enhanced}"
                    output_file.write(f"{output_line}\n")
        output_file.write("\n")
