import json
import os

# Define paths
current_dir = os.path.dirname(__file__)
txt_output_file = os.path.join(current_dir, 'DestinyAnalysisOutput.txt')
weapon_hashes_file = os.path.join(current_dir, 'WeaponHashes.txt')
analysis_txt_path = os.path.join(current_dir, 'Destiny 2_Endgame Analysis.txt')
json_path = os.path.join(current_dir, 'bungie_data.json')
output_path = txt_output_file  # Define output_path for the single output file

# Load WeaponHashes.txt
if not os.path.exists(weapon_hashes_file):
    raise FileNotFoundError(f"WeaponHashes.txt not found in {current_dir}. Please generate it first.")
with open(weapon_hashes_file, 'r', encoding='utf-8') as f:
    weapon_lines = [line.strip() for line in f if line.strip()]

# Load bungie_data.json
if not os.path.exists(json_path):
    raise FileNotFoundError(f"bungie_data.json not found in {json_path}")
with open(json_path, 'r', encoding='utf-8') as f:
    bungie_data = json.load(f)

# Load Destiny 2_Endgame Analysis.txt for perk data
if not os.path.exists(analysis_txt_path):
    raise FileNotFoundError(f"Destiny 2_Endgame Analysis.txt not found in {current_dir}")
with open(analysis_txt_path, 'r', encoding='utf-8') as f:
    analysis_lines = [line.strip() for line in f if line.strip()]
perk_data = {}
current_category = None
for line in analysis_lines:
    if line.endswith(':'):
        current_category = line[:-1]
        perk_data[current_category] = {}
    elif line.startswith('- ') and ' (' in line:
        parts = line.split(' (')[0].strip().split('- ')
        weapon_name = parts[1].strip()
        if current_category and weapon_name:
            perk_data[current_category][weapon_name] = line

# Process weapon data from WeaponHashes.txt, using hash for sockets and text file for perks
with open(output_path, 'w', encoding='utf-8') as output_file:
    current_sheet = None
    for line in weapon_lines:
        if line.endswith(':'):
            current_sheet = line
            output_file.write(f"{current_sheet}\n")
        elif line.startswith('- ') and ', ' in line:  # Process weapon hash lines
            parts = line.split(', ')
            weapon_name = parts[0].replace('- ', '')
            weapon_hash = parts[1] if parts[1] != 'Not Found' else None
            output_file.write(f"  - Weapon: {weapon_name}\n")
            if weapon_hash:
                output_file.write(f"    Weapon Hash: {weapon_hash}\n")
                # Check for multiple perk sockets using weapon hash
                multiple_perk_sockets = False
                has_enhanced_perks = False
                is_craftable = False
                if str(weapon_hash) in bungie_data.get('DestinyInventoryItemDefinition', {}):
                    weapon_item = bungie_data['DestinyInventoryItemDefinition'][str(weapon_hash)]
                    if 'perks' in weapon_item and any(p.get('perkHash') for p in weapon_item.get('perks', [])) and 'recipeItemHash' in weapon_item:
                        is_craftable = True
                    if 'sockets' in weapon_item and 'socketCategories' in weapon_item:
                        socket_entries = weapon_item['sockets'].get('socketEntries', [])
                        socket_categories = weapon_item['sockets'].get('socketCategories', [])
                        perk_category = next((cat for cat in socket_categories if cat.get('socketCategoryHash') == 4241085061), None)
                        if perk_category:
                            perk_indexes = perk_category.get('socketIndexes', [])
                            # Count primary perk sockets, excluding origin trait (limit to first two for crafted)
                            if is_craftable:
                                perk_sockets = [socket_entries[i] for i in perk_indexes[:2] if 'randomizedPlugSetHash' in socket_entries[i]]  # First two for crafted
                            else:
                                perk_sockets = [socket_entries[i] for i in perk_indexes if 'randomizedPlugSetHash' in socket_entries[i]]  # All for non-crafted
                            if not is_craftable and len(perk_sockets) > 1:  # Non-crafted with multiple columns
                                multiple_perk_sockets = True
                            elif is_craftable and len(perk_sockets) > 1 and any(variant.lower() in weapon_name.lower() for variant in ['adept']):  # Crafted Adept with multiple columns
                                multiple_perk_sockets = True
                            if any('randomizedPlugSetHash' in entry for entry in socket_entries):
                                has_enhanced_perks = True
                            # Additional check for craftable weapons
                            if 'perks' in weapon_item and any(p.get('perkHash') for p in weapon_item.get('perks', [])):
                                has_enhanced_perks = True
                output_file.write(f"    Multiple Perk Sockets: {multiple_perk_sockets}\n")

                # Find perks for Column 1 and Column 2 from Destiny 2_Endgame Analysis.txt
                base_name = weapon_name.split(' (')[0].strip()  # Extract base name for fallback
                variant_found = any(variant.lower() in weapon_name.lower() for variant in ['adept', 'harrowed', 'timelost', 'rotn', 'brave'])
                current_perks = None

                # Look for specific variant or base weapon perks in the text file
                for category in perk_data:
                    if current_sheet == f"{category}:":
                        if weapon_name in perk_data[category]:
                            current_perks = perk_data[category][weapon_name]
                        elif variant_found:
                            # Check all base names in the category for a match
                            for base in perk_data[category]:
                                if base_name == base:
                                    current_perks = perk_data[category][base]
                                    break
                        break

                if current_perks:
                    # Clean perk names by removing stray characters
                    current_perks = current_perks.replace(')', '').replace('(', '')
                    # Extract perks from the line (assuming format includes Column 1 and Column 2)
                    if 'Column 1:' in current_perks and 'Column 2:' in current_perks:
                        col1_perks_str = current_perks.split('Column 1: ')[1].split('Column 2:')[0].strip()
                        col2_perks_str = current_perks.split('Column 2: ')[1].strip()
                        col1_perks = [p.strip() for p in col1_perks_str.split(',') if p.strip()]
                        col2_perks = [p.strip() for p in col2_perks_str.split(',') if p.strip()]
                    else:
                        col1_perks = []
                        col2_perks = []

                    # Find perk hashes for Column 1
                    if col1_perks:
                        output_file.write("    Column 1 Perks:\n")
                        for perk in col1_perks:
                            item_hash_non_enhanced = None
                            item_hash_enhanced = None
                            for item_hash, item in bungie_data.get('DestinyInventoryItemDefinition', {}).items():
                                if 'displayProperties' in item and 'name' in item['displayProperties']:
                                    if item['displayProperties']['name'].lower().strip() == perk.lower().strip():
                                        if has_enhanced_perks and ('itemTypeDisplayName' in item and item['itemTypeDisplayName'] == 'Enhanced Trait' or
                                            'tooltipNotifications' in item and any("improved" in notif['displayString'].lower() or "enhances" in notif['displayString'].lower() or "improves" in notif['displayString'].lower() for notif in item.get('tooltipNotifications', []))):
                                            item_hash_enhanced = item_hash
                                        else:
                                            item_hash_non_enhanced = item_hash
                            output_line = f"      {perk} (Non-Enhanced), Hash: {item_hash_non_enhanced if item_hash_non_enhanced else 'Not Found'}"
                            if has_enhanced_perks and item_hash_enhanced:
                                output_line += f", {perk} (Enhanced), Hash: {item_hash_enhanced}"
                            output_file.write(f"{output_line}\n")

                    # Find perk hashes for Column 2
                    if col2_perks:
                        output_file.write("    Column 2 Perks:\n")
                        for perk in col2_perks:
                            item_hash_non_enhanced = None
                            item_hash_enhanced = None
                            for item_hash, item in bungie_data.get('DestinyInventoryItemDefinition', {}).items():
                                if 'displayProperties' in item and 'name' in item['displayProperties']:
                                    if item['displayProperties']['name'].lower().strip() == perk.lower().strip():
                                        if has_enhanced_perks and ('itemTypeDisplayName' in item and item['itemTypeDisplayName'] == 'Enhanced Trait' or
                                            'tooltipNotifications' in item and any("improved" in notif['displayString'].lower() or "enhances" in notif['displayString'].lower() or "improves" in notif['displayString'].lower() for notif in item.get('tooltipNotifications', []))):
                                            item_hash_enhanced = item_hash
                                        else:
                                            item_hash_non_enhanced = item_hash
                            output_line = f"      {perk} (Non-Enhanced), Hash: {item_hash_non_enhanced if item_hash_non_enhanced else 'Not Found'}"
                            if has_enhanced_perks and item_hash_enhanced:
                                output_line += f", {perk} (Enhanced), Hash: {item_hash_enhanced}"
                            output_file.write(f"{output_line}\n")
        output_file.write("\n")
