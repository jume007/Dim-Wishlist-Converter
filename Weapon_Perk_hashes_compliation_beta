import json
import os
import openpyxl
from openpyxl.utils import get_column_letter

# Define paths
current_dir = os.path.dirname(__file__)
output_file = os.path.join(current_dir, 'DestinyAnalysisOutput.xlsx')
analysis_txt_path = os.path.join(current_dir, 'Destiny 2_Endgame Analysis.txt')
collectible_json_path = os.path.join(current_dir, 'DestinyCollectibleDefinition.json')
bungie_json_path = os.path.join(current_dir, 'bungie_data.json')

print(f"Current directory: {os.path.abspath(current_dir)}")
print(f"Output file path: {os.path.abspath(output_file)}")

# Step 1: Load and process Destiny 2_Endgame Analysis.txt for weapon names
if not os.path.exists(analysis_txt_path):
    raise FileNotFoundError(f"Destiny 2_Endgame Analysis.txt not found at {analysis_txt_path}")
print(f"Found Destiny 2_Endgame Analysis.txt")
with open(analysis_txt_path, 'r', encoding='utf-8') as f:
    weapon_lines = [line.strip() for line in f if line.strip()]

# Load DestinyCollectibleDefinition.json
if not os.path.exists(collectible_json_path):
    raise FileNotFoundError(f"DestinyCollectibleDefinition.json not found at {collectible_json_path}")
print(f"Found DestinyCollectibleDefinition.json")
with open(collectible_json_path, 'r', encoding='utf-8') as f:
    collectible_data = json.load(f)

# Step 1: Generate weapon hashes (Script 1 logic)
weapon_hashes = {}
current_category = None
for line in weapon_lines:
    if line.endswith(':') and ' (' not in line:
        current_category = line[:-1]
        weapon_hashes[current_category] = []
    elif line.startswith('- ') and ' (' in line:
        base_part = line.split(' (')[0].strip()
        weapon_name = ' '.join(base_part.split('- ')[1].split()[:-2] if any(v in line for v in ['BRAVE version', 'RotN version']) else base_part.split('- ')[1].split()).strip()
        weapon_hash = None

        # Handle normal weapons and standard variants
        if 'BRAVE version' not in line and 'RotN version' not in line:
            for item in collectible_data.values():
                if 'displayProperties' in item and 'name' in item['displayProperties']:
                    json_name = item['displayProperties']['name'].lower().strip()
                    if json_name == weapon_name.lower().strip():
                        item_hash = item.get('itemHash')
                        if item_hash is not None:
                            weapon_hash = str(item_hash)
                            weapon_hashes[current_category].append({'Weapon': weapon_name, 'Weapon Hash': weapon_hash})
                            print(f"Found hash for {weapon_name}: {weapon_hash}")
                            break
            if not weapon_hash:
                weapon_hashes[current_category].append({'Weapon': weapon_name, 'Weapon Hash': 'Not Found'})
                print(f"No hash found for {weapon_name}")
            variants = ['Adept', 'Timelost', 'Harrowed']
            for var in variants:
                variant_name = f"{weapon_name} ({var})"
                for item in collectible_data.values():
                    if 'displayProperties' in item and 'name' in item['displayProperties']:
                        json_name = item['displayProperties']['name'].lower().strip()
                        if json_name == variant_name.lower().strip():
                            item_hash = item.get('itemHash')
                            if item_hash is not None:
                                weapon_hashes[current_category].append({'Weapon': variant_name, 'Weapon Hash': str(item_hash)})
                                print(f"Found hash for {variant_name}: {item_hash}")
                                break
        elif 'BRAVE version' in line:
            full_weapon = f"{weapon_name} (BRAVE)"
            for item in collectible_data.values():
                if ('displayProperties' in item and 'name' in item['displayProperties'] and
                    'itemHash' in item and 'sourceString' in item):
                    json_name = item['displayProperties']['name'].lower().strip()
                    source = item['sourceString'].lower().strip() if item['sourceString'] else ""
                    if json_name == weapon_name.lower().strip() and 'into the light' in source:
                        weapon_hash = str(item['itemHash'])
                        weapon_hashes[current_category].append({'Weapon': full_weapon, 'Weapon Hash': weapon_hash})
                        print(f"Found hash for {full_weapon}: {weapon_hash}")
                        break
        elif 'RotN version' in line:
            for item in collectible_data.values():
                if ('displayProperties' in item and 'name' in item['displayProperties'] and
                    'itemHash' in item and 'sourceString' in item):
                    json_name = item['displayProperties']['name'].lower().strip()
                    source = item['sourceString'].lower().strip() if item['sourceString'] else ""
                    if json_name == weapon_name.lower().strip() and 'rite of the nine' in source and 'adept' not in json_name.lower():
                        weapon_hash = str(item['itemHash'])
                        full_weapon = f"{weapon_name} (RotN)"
                        weapon_hashes[current_category].append({'Weapon': full_weapon, 'Weapon Hash': weapon_hash})
                        print(f"Found hash for {full_weapon}: {weapon_hash}")
                        break
            for item in collectible_data.values():
                if ('displayProperties' in item and 'name' in item['displayProperties'] and
                    'itemHash' in item and 'sourceString' in item):
                    json_name = item['displayProperties']['name'].lower().strip()
                    source = item['sourceString'].lower().strip() if item['sourceString'] else ""
                    if f"{weapon_name.lower()} (adept)" in json_name and 'rite of the nine' in source:
                        weapon_hashes[current_category].append({'Weapon': f"{weapon_name} (RotN Adept)", 'Weapon Hash': str(item['itemHash'])})
                        print(f"Found hash for {weapon_name} (RotN Adept): {item['itemHash']}")

# Step 2: Load bungie_data.json for perk hashes
if not os.path.exists(bungie_json_path):
    raise FileNotFoundError(f"bungie_data.json not found at {bungie_json_path}")
print(f"Found bungie_data.json")
with open(bungie_json_path, 'r', encoding='utf-8') as f:
    bungie_data = json.load(f)

# Parse Destiny 2_Endgame Analysis.txt for perk data
perk_data = {}
current_category = None
for line in weapon_lines:
    if line.endswith(':') and ' (' not in line:
        current_category = line[:-1]
        perk_data[current_category] = {}
    elif line.startswith('- ') and ' (' in line:
        parts = line.split(' (')[0].strip().split('- ')
        weapon_name = parts[1].strip()
        if current_category and weapon_name:
            perk_data[current_category][weapon_name] = line

# Step 2: Add perk hashes to weapon data
sheet_data = {category: [] for category in weapon_hashes}
for category, weapons in weapon_hashes.items():
    for weapon in weapons:
        weapon_name = weapon['Weapon']
        weapon_hash = weapon['Weapon Hash']
        row_data = {'Weapon': weapon_name, 'Weapon Hash': weapon_hash, 'Column 1 Perks': [], 'Column 2 Perks': []}

        if weapon_hash and weapon_hash != 'Not Found':
            # Check for multiple perk sockets (retained for logic, not output)
            multiple_perk_sockets = False
            has_enhanced_perks = False
            is_craftable = False
            if str(weapon_hash) in bungie_data.get('DestinyInventoryItemDefinition', {}):
                weapon_item = bungie_data['DestinyInventoryItemDefinition'][str(weapon_hash)]
                if 'perks' in weapon_item and any(p.get('perkHash') for p in weapon_item.get('perks', [])) and 'recipeItemHash' in weapon_item:
                    is_craftable = True
                if 'sockets' in weapon_item and 'socketCategories' in weapon_item['sockets']:
                    socket_entries = weapon_item['sockets'].get('socketEntries', [])
                    socket_categories = weapon_item['sockets'].get('socketCategories', [])
                    perk_category = next((cat for cat in socket_categories if cat.get('socketCategoryHash') == 4241085061), None)
                    if perk_category:
                        perk_indexes = perk_category.get('socketIndexes', [])
                        if is_craftable:
                            perk_sockets = [socket_entries[i] for i in perk_indexes[:2] if 'randomizedPlugSetHash' in socket_entries[i]]
                        else:
                            perk_sockets = [socket_entries[i] for i in perk_indexes if 'randomizedPlugSetHash' in socket_entries[i]]
                        if not is_craftable and len(perk_sockets) > 1:
                            multiple_perk_sockets = True
                        elif is_craftable and len(perk_sockets) > 1 and any(variant.lower() in weapon_name.lower() for variant in ['adept']):
                            multiple_perk_sockets = True
                        if any('randomizedPlugSetHash' in entry for entry in socket_entries):
                            has_enhanced_perks = True
                        if 'perks' in weapon_item and any(p.get('perkHash') for p in weapon_item.get('perks', [])):
                            has_enhanced_perks = True

            # Find perks for Column 1 and Column 2
            base_name = weapon_name.split(' (')[0].strip()
            variant_found = any(variant.lower() in weapon_name.lower() for variant in ['adept', 'harrowed', 'timelost', 'rotn', 'brave'])
            current_perks = None

            for perk_category in perk_data:
                if category == perk_category:
                    if weapon_name in perk_data[perk_category]:
                        current_perks = perk_data[perk_category][weapon_name]
                    elif variant_found:
                        for base in perk_data[perk_category]:
                            if base_name == base:
                                current_perks = perk_data[perk_category][base]
                                break
                    break

            if current_perks:
                current_perks = current_perks.replace(')', '').replace('(', '')
                if 'Column 1:' in current_perks and 'Column 2:' in current_perks:
                    col1_perks_str = current_perks.split('Column 1: ')[1].split('Column 2:')[0].strip()
                    col2_perks_str = current_perks.split('Column 2: ')[1].strip()
                    col1_perks = [p.strip() for p in col1_perks_str.split(',') if p.strip()]
                    col2_perks = [p.strip() for p in col2_perks_str.split(',') if p.strip()]
                    print(f"Found perks for {weapon_name}: Column 1: {col1_perks}, Column 2: {col2_perks}")
                else:
                    col1_perks = []
                    col2_perks = []
                    print(f"No perks found for {weapon_name} in {perk_category}")

                # Process Column 1 perks
                col1_perk_strings = []
                if col1_perks:
                    for perk in col1_perks:
                        item_hash_non_enhanced = None
                        item_hash_enhanced = None
                        for item_hash, item in bungie_data.get('DestinyInventoryItemDefinition', {}).items():
                            if 'displayProperties' in item and 'name' in item['displayProperties']:
                                if item['displayProperties']['name'].lower().strip() == perk.lower().strip():
                                    if has_enhanced_perks and ('itemTypeDisplayName' in item and item['itemTypeDisplayName'] == 'Enhanced Trait' or
                                        'tooltipNotifications' in item and any("improved" in notif['displayString'].lower() or "enhances" in notif['displayString'].lower() or "improves" in notif['displayString'].lower() for notif in item.get('tooltipNotifications', []))):
                                        item_hash_enhanced = item_hash
                                    else:
                                        item_hash_non_enhanced = item_hash
                        if item_hash_non_enhanced:
                            col1_perk_strings.append(f"{perk} (Non-Enhanced), Hash: {item_hash_non_enhanced}")
                        if has_enhanced_perks and item_hash_enhanced:
                            col1_perk_strings.append(f"{perk} (Enhanced), Hash: {item_hash_enhanced}")
                    row_data['Column 1 Perks'] = col1_perk_strings

                # Process Column 2 perks
                col2_perk_strings = []
                if col2_perks:
                    for perk in col2_perks:
                        item_hash_non_enhanced = None
                        item_hash_enhanced = None
                        for item_hash, item in bungie_data.get('DestinyInventoryItemDefinition', {}).items():
                            if 'displayProperties' in item and 'name' in item['displayProperties']:
                                if item['displayProperties']['name'].lower().strip() == perk.lower().strip():
                                    if has_enhanced_perks and ('itemTypeDisplayName' in item and item['itemTypeDisplayName'] == 'Enhanced Trait' or
                                        'tooltipNotifications' in item and any("improved" in notif['displayString'].lower() or "enhances" in notif['displayString'].lower() or "improves" in notif['displayString'].lower() for notif in item.get('tooltipNotifications', []))):
                                        item_hash_enhanced = item_hash
                                    else:
                                        item_hash_non_enhanced = item_hash
                        if item_hash_non_enhanced:
                            col2_perk_strings.append(f"{perk} (Non-Enhanced), Hash: {item_hash_non_enhanced}")
                        if has_enhanced_perks and item_hash_enhanced:
                            col2_perk_strings.append(f"{perk} (Enhanced), Hash: {item_hash_enhanced}")
                    row_data['Column 2 Perks'] = col2_perk_strings

        print(f"Processing weapon: {row_data['Weapon']}, Column 1 Perks: {row_data['Column 1 Perks']}, Column 2 Perks: {row_data['Column 2 Perks']}")
        sheet_data[category].append(row_data)

# Write to Excel
wb = openpyxl.Workbook()
wb.remove(wb.active)

for sheet_name, rows in sheet_data.items():
    ws = wb.create_sheet(title=sheet_name)
    headers = ['Weapon', 'Weapon Hash', 'Column 1 Perks', 'Column 2 Perks']
    ws.append(headers)
    
    for row_data in rows:
        max_perks = max(len(row_data.get('Column 1 Perks', [])), len(row_data.get('Column 2 Perks', [])), 1)
        for i in range(max_perks):
            row = [
                row_data['Weapon'] if i == 0 else '',
                row_data['Weapon Hash'] if i == 0 else '',
                row_data['Column 1 Perks'][i] if i < len(row_data['Column 1 Perks']) else '',
                row_data['Column 2 Perks'][i] if i < len(row_data['Column 2 Perks']) else ''
            ]
            ws.append(row)

    # Adjust column widths
    for col in ws.columns:
        max_length = 0
        column = col[0].column_letter
        for cell in col:
            try:
                if len(str(cell.value)) > max_length:
                    max_length = len(str(cell.value))
            except:
                pass
        adjusted_width = (max_length + 2)
        ws.column_dimensions[column].width = adjusted_width

print(f"Saving Excel file to: {os.path.abspath(output_file)}")
wb.save(output_file)
